AWSTemplateFormatVersion: '2010-09-09'
Description: Error Test Health Check

Parameters:
  Environment:
    Type: String
    Default: prod
  TestSlackWebhook:
    Type: String
    Description: Slack webhook for test notifications

Resources:
  # Test Health Check (will fail)
  TestErrorHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: HTTPS
        ResourcePath: /
        FullyQualifiedDomainName: nonexistent-test-domain-12345.com
        Port: 443
        RequestInterval: 30
        FailureThreshold: 1  # 1回の失敗で即座にアラーム
        MeasureLatency: true
      HealthCheckTags:
        - Key: Name
          Value: !Sub "${Environment}-test-error-health-check"
        - Key: Environment
          Value: !Ref Environment

  # SNS Topic for test
  TestMonitoringTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-test-monitoring-alerts"
      DisplayName: Test Server Monitoring Alerts

  # Lambda function for Slack notification
  TestSlackNotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref TestMonitoringTopic

  TestSlackNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Environment}-test-slack-notification"
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt TestSlackNotificationFunctionRole.Arn
      Environment:
        Variables:
          DEFAULT_SLACK_WEBHOOK: !Ref TestSlackWebhook
      Code:
        ZipFile: |
          import json
          import urllib3
          import os
          
          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")
              
              # SNSメッセージを解析
              message = json.loads(event['Records'][0]['Sns']['Message'])
              alarm_name = message['AlarmName']
              new_state = message['NewStateValue']
              reason = message['NewStateReason']
              
              # Slack Webhook URL
              webhook_url = os.environ.get('DEFAULT_SLACK_WEBHOOK')
              
              # Slackメッセージを作成
              if new_state == 'ALARM':
                  color = 'danger'
                  emoji = ':rotating_light:'
                  title = 'サーバー監視アラート - 障害発生'
              else:
                  color = 'good'
                  emoji = ':white_check_mark:'
                  title = 'サーバー監視アラート - 復旧'
              
              slack_message = {
                  'attachments': [{
                      'color': color,
                      'title': f'{emoji} {title}',
                      'fields': [
                          {'title': 'アラーム名', 'value': alarm_name, 'short': True},
                          {'title': '状態', 'value': new_state, 'short': True},
                          {'title': '理由', 'value': reason, 'short': False}
                      ],
                      'footer': 'AWS CloudWatch',
                      'ts': int(context.aws_request_id[:8], 16)
                  }]
              }
              
              # Slackに送信
              http = urllib3.PoolManager()
              response = http.request(
                  'POST',
                  webhook_url,
                  body=json.dumps(slack_message),
                  headers={'Content-Type': 'application/json'}
              )
              
              print(f"Slack response: {response.status}")
              return {'statusCode': 200}

  # CloudWatch Alarm
  TestErrorHealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-test-error-health-check-failed"
      AlarmDescription: Test error health check failed
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: HealthCheckId
          Value: !Ref TestErrorHealthCheck
      AlarmActions:
        - !Ref TestMonitoringTopic
      OKActions:
        - !Ref TestMonitoringTopic

  # SNS Subscription
  TestSlackNotificationFunctionSNSEvent:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Ref TestMonitoringTopic
      Endpoint: !GetAtt TestSlackNotificationFunction.Arn

  TestSlackNotificationFunctionSNSEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TestSlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref TestMonitoringTopic

Outputs:
  TestHealthCheckId:
    Description: Test Health Check ID
    Value: !Ref TestErrorHealthCheck
  
  TestAlarmName:
    Description: Test Alarm Name
    Value: !Ref TestErrorHealthCheckAlarm
